---
AWSTemplateFormatVersion: 2010-09-09
Description: This is a CloudFormation template to create infrastructure to send logs that are put into a CloudWatch Logs group.

Parameters:

  service:
    Type: String
    Description: Service name used in tagging AWS resources.
    Default: splunk-aws-gdi-toolkit

  stage:
    Type: String
    Description: Used to distinguish between stages of an environment (dev, test, prod, stage, etc).  Only used in AWS resource tagging.
    Default: dev

  contact:
    Description: Used to identify a contact for the resources created in this stack.  Only used in AWS resource tagging.  As an example, this could be an email address or username.
    Type: String
    Default: ""

  logType:
    Type: String
    Description: Log type, used in AWS resource names.
    AllowedPattern: "(?!(xn--|-s3alias$))^[a-z0-9][a-z0-9-]{1,20}[a-z0-9]$"

  cwlFilterPattern:
    Type: String
    Description: Filter pattern used control which data is sent to Splunk from CloudWatch Logs.  Leave blank to capture all logs.  https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html
    Default: ""

  cwlLogGroupName:
    Type: String
    Description: CloudWatch log group name which has events that will be forwarded to Splunk.

  splunkHECEndpoint:
    Type: String
    Description: Destination URL that Firehose will send data to.

  splunkHECToken:
    Type: String
    Description: HEC token Firehose will use to authenticate data being sent to Splunk.

  splunkIndex:
    Type: String
    Description: Name of the index in Splunk events will be sent to.

  splunkSourcetype:
    Type: String
    Description: Name of the sourcetype for the events that will be sent to Splunk.

  splunkSource:
    Type: String
    Description: Name of the source for the events that will be sent to Splunk.

  splunkHost:
    Type: String
    Description: Name of the host for the events that will be sent to Splunk.

  cloudWatchAlertEmail:
    Type: String
    Description: Email address for receiving alerts related to CloudTrail ingestion.  Leave empty for no alerting.
    Default: ""

Conditions:
  enableAlerting: !Not 
    - !Equals 
      - !Ref cloudWatchAlertEmail
      - ""

Resources:
  # CloudWatch Logs > Firehose resources
  cwlSubscription: 
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !GetAtt firehose.Arn
      FilterPattern: !Ref cwlFilterPattern
      LogGroupName: !Ref cwlLogGroupName
      RoleArn: !GetAtt cwlIAMRole.Arn

  cwlIAMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - firehose:PutRecord
          - firehose:PutRecordBatch
          Resource: !GetAtt firehose.Arn
      ManagedPolicyName: !Sub "${AWS::AccountId}-${AWS::Region}-${logType}-cwl-iam-policy"

  cwlIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "logs.amazonaws.com"
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref cwlIAMPolicy
      RoleName: !Sub "${AWS::AccountId}-${AWS::Region}-${logType}-cwl-iam-role"
      Tags:
      - Key: service
        Value: !Ref service
      - Key: stage
        Value: !Ref stage
      - Key: contact
        Value: !Ref contact

  # Firehose > Splunk resources
  firehose:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties: 
      DeliveryStreamName: !Sub "${AWS::AccountId}-${AWS::Region}-${logType}-firehose"
      DeliveryStreamType: DirectPut
      SplunkDestinationConfiguration:
        BufferingHints:
          IntervalInSeconds: 5
          SizeInMBs: 1
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Ref firehoseLogGroup
          LogStreamName: "SplunkDelivery"
        HECAcknowledgmentTimeoutInSeconds: 300
        HECEndpoint: !Ref splunkHECEndpoint
        HECEndpointType: "Event"
        HECToken: !Ref splunkHECToken
        ProcessingConfiguration:
          Enabled: true
          Processors:
          - Parameters:
            - ParameterName: LambdaArn
              ParameterValue: !GetAtt lambdaFunction.Arn
            - ParameterName: RoleArn
              ParameterValue: !GetAtt firehoseIAMRole.Arn
            - ParameterName: BufferSizeInMBs
              ParameterValue: 1
            - ParameterName: BufferIntervalInSeconds
              ParameterValue: 5
            Type: Lambda
        RetryOptions:
          DurationInSeconds: 3600
        S3BackupMode: "FailedEventsOnly"
        S3Configuration:
          BucketARN: !Sub "arn:aws:s3:::${AWS::AccountId}-${AWS::Region}-${logType}-firehose-backsplash"
          BufferingHints:
            IntervalInSeconds: 300
            SizeInMBs: 16
          CompressionFormat: "GZIP"
          Prefix: !Sub "${AWS::AccountId}-${AWS::Region}-${logType}-firehose"
          RoleARN: !GetAtt firehoseIAMRole.Arn

  firehoseIAMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:Describe*
          - logs:PutLogEvents
          Resource: !GetAtt firehoseLogGroup.Arn
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource: !Sub "arn:aws:s3:::${AWS::AccountId}-${AWS::Region}-${logType}-firehose-backsplash/*"
        - Effect: Allow
          Action:
          - lambda:InvokeFunction
          - lambda:GetFunctionConfiguration
          Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::AccountId}-${AWS::Region}-${logType}-lambda-function"
      ManagedPolicyName: !Sub "${AWS::AccountId}-${AWS::Region}-${logType}-firehose-iam-policy"

  firehoseIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "firehose.amazonaws.com"
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref firehoseIAMPolicy
      RoleName: !Sub "${AWS::AccountId}-${AWS::Region}-${logType}-firehose-iam-role"
      Tags:
      - Key: service
        Value: !Ref service
      - Key: stage
        Value: !Ref stage
      - Key: contact
        Value: !Ref contact

  firehoseBacksplashBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::AccountId}-${AWS::Region}-${logType}-firehose-backsplash"
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
            - Id: !Sub "${AWS::AccountId}-${AWS::Region}-${logType}-firehose-backsplash-cleanup"
              AbortIncompleteMultipartUpload:
                DaysAfterInitiation: 1
              Status: Enabled
      Tags:
      - Key: service
        Value: !Ref service
      - Key: stage
        Value: !Ref stage
      - Key: contact
        Value: !Ref contact

  firehoseLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub "/aws/kinesisfirehose/${AWS::AccountId}-${AWS::Region}-${logType}-firehose"
      RetentionInDays: 7

  firehoseLogStream:
    Type: AWS::Logs::LogStream
    Properties: 
      LogGroupName: !Ref firehoseLogGroup
      LogStreamName: "SplunkDelivery"

# Lambda resources
  lambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: lambdaLogGroup
    Properties:
      Architectures:
        - arm64
      Code:
        ZipFile: |
          import os, gzip, json, base64

          SPLUNK_SOURCE = os.environ['SPLUNK_SOURCE']
          SPLUNK_SOURCETYPE = os.environ['SPLUNK_SOURCETYPE']
          SPLUNK_HOST = os.environ['SPLUNK_HOST']
          SPLUNK_INDEX = os.environ['SPLUNK_INDEX']

          # Default Lambda handler
          def handler(event, context):

            returnRecords = []

            # Decode events, and split into separate items in a list
            for record in event['records']:

              # Decode and uncompress raw log event
              decodedData = json.loads(gzip.decompress(base64.b64decode(record['data'])))

              formattedEvents = ""
              returnEvent = {}

              # Loop through each log event, construct event, add to return array
              for logEvent in decodedData['logEvents']:

                # Format Splunk event
                formattedEvents += '{ "time": ' +  str(logEvent['timestamp']) + ', "host": "' + SPLUNK_HOST + '", "source": "' + SPLUNK_SOURCE + '", "sourcetype": "' + SPLUNK_SOURCETYPE + '", "index": "' + SPLUNK_INDEX + '", "event": ' + json.dumps(logEvent['message']) + '}'

              # Construct return event
              returnEvent['recordId'] = dict(record)['recordId']
              returnEvent['result'] = "Ok"
              returnEvent['data'] = base64.b64encode(formattedEvents.encode('utf-8')).decode()

              # Print for debugging
              print("Processed record " + record['recordId'])

              # Add return events to array to return all the records to Firehose
              returnRecords.append(returnEvent)

            return {'records': returnRecords}
      Description: Lambda function for processing Firehose messages into standard event format for Splunk.
      Environment:
        Variables:
          SPLUNK_INDEX: !Ref splunkIndex
          SPLUNK_SOURCE: !Ref splunkSource
          SPLUNK_SOURCETYPE: !Ref splunkSourcetype
          SPLUNK_HOST: !Ref splunkHost
      FunctionName: !Sub "${AWS::AccountId}-${AWS::Region}-${logType}-lambda-function"
      Handler: index.handler
      MemorySize: 512
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: python3.12
      Tags:
      - Key: service
        Value: !Ref service
      - Key: stage
        Value: !Ref stage
      - Key: contact
        Value: !Ref contact
      Timeout: 300

  lambdaIAMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - firehose:PutRecord
          - firehose:PutRecordBatch
          Resource: !Sub "arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/${AWS::AccountId}-${AWS::Region}-${logType}-firehose"
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::AccountId}-${AWS::Region}-${logType}-lambda-function*"
      ManagedPolicyName: !Sub "${AWS::AccountId}-${AWS::Region}-${logType}-lambda-iam-policy"

  lambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref lambdaIAMPolicy
      RoleName: !Sub "${AWS::AccountId}-${AWS::Region}-${logType}-lambda-iam-role"
      Tags:
      - Key: service
        Value: !Ref service
      - Key: stage
        Value: !Ref stage
      - Key: contact
        Value: !Ref contact

  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::AccountId}-${AWS::Region}-${logType}-lambda-function"
      RetentionInDays: 7

  # Monitoring resoruces
  monitoringSNSTopic:
    Condition: enableAlerting
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "${AWS::AccountId}-${AWS::Region}-${logType}-alerting-topic"
      TopicName: !Sub "${AWS::AccountId}-${AWS::Region}-${logType}-alerting-topic"
      Subscription:
        - Endpoint: !Ref cloudWatchAlertEmail
          Protocol: email

  lambdaInvocationAlarm:
    Condition: enableAlerting
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: True
      AlarmActions: 
        - !Ref monitoringSNSTopic
      AlarmDescription: !Sub "Alarm if lambda function ${AWS::AccountId}-${AWS::Region}-${logType}-lambda-function errors out.  Check CloudWatch Logs to verify the function is running correctly."
      AlarmName: !Sub "${AWS::AccountId}-${AWS::Region}-${logType}-lambda-error-invocations"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: FunctionName
        Value: !Sub "${AWS::AccountId}-${AWS::Region}-${logType}-lambda-function"
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      Unit: Count

  lambdaDurationAlarm:
    Condition: enableAlerting
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: True
      AlarmActions: 
        - !Ref monitoringSNSTopic
      AlarmDescription: !Sub "Alarm if lambda function ${AWS::AccountId}-${AWS::Region}-${logType}-lambda-function runs over 5 minutes."
      AlarmName: !Sub "${AWS::AccountId}-${AWS::Region}-${logType}-lambda-error-duration"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: FunctionName
        Value: !Sub "${AWS::AccountId}-${AWS::Region}-${logType}-lambda-function"
      EvaluationPeriods: 1
      MetricName: Duration
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Maximum
      Threshold: 300000
      Unit: Milliseconds

  firehoseDeliveryAlarm:
    Condition: enableAlerting
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: True
      AlarmActions: 
        - !Ref monitoringSNSTopic
      AlarmDescription: !Sub "Alarm if Firehose ${AWS::AccountId}-${AWS::Region}-${logType}-firehose cannot deliver to Splunk."
      AlarmName: !Sub "${AWS::AccountId}-${AWS::Region}-${logType}-firehose-delivery-alarm"
      ComparisonOperator: LessThanThreshold
      Dimensions:
      - Name: DeliveryStreamName
        Value: !Sub "${AWS::AccountId}-${AWS::Region}-${logType}-firehose"
      EvaluationPeriods: 1
      MetricName: DeliveryToSplunk.Success
      Namespace: AWS/Firehose
      Period: 60
      Statistic: Maximum
      Threshold: 1
      Unit: Count

  firehoseThrottlingAlarm:
    Condition: enableAlerting
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: True
      AlarmActions: 
        - !Ref monitoringSNSTopic
      AlarmDescription: !Sub "Alarm if Firehose ${AWS::AccountId}-${AWS::Region}-${logType}-firehose is throttling events because of quota limits."
      AlarmName: !Sub "${AWS::AccountId}-${AWS::Region}-${logType}-firehose-throttling-alarm"
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: DeliveryStreamName
        Value: !Sub "${AWS::AccountId}-${AWS::Region}-${logType}-firehose"
      EvaluationPeriods: 1
      MetricName: ThrottledRecords
      Namespace: AWS/Firehose
      Period: 60
      Statistic: Maximum
      Threshold: 0
      Unit: Count

Outputs:
  cwlSubscriptionID:
    Value: !Ref cwlSubscription
  cwlIAMRoleArn:
    Value: !GetAtt cwlIAMRole.Arn
  firehoseArn:
    Value: !GetAtt firehose.Arn
  firehoseIAMRoleArn:
    Value: !GetAtt firehoseIAMRole.Arn
  firehoseBacksplashBucketArn:
    Value: !GetAtt firehoseBacksplashBucket.Arn
  firehoseLogGroupArn:
    Value: !GetAtt firehoseLogGroup.Arn
  lambdaFunctionArn:
    Value: !GetAtt lambdaFunction.Arn
  lambdaIAMRoleArn:
    Value: !GetAtt lambdaIAMRole.Arn
  lambdaLogGroupArn:
    Value: !GetAtt lambdaLogGroup.Arn